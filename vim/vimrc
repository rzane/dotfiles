"""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""

if filereadable(expand("~/.vim/vimrc.bundles"))
  source ~/.vim/vimrc.bundles
end

"""""""""""""""""""""""
" General
"""""""""""""""""""""""

" Use UTF-8 encoding
set encoding=UTF-8

" Sets how many lines of history VIM has to remember
set history=500

" Enable filetype plugins
filetype plugin on
filetype indent on

" Use the system clipboard
set clipboard=unnamed

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "

" Fast saving
nmap <leader>w :w!<cr>

" Remap capital letters to their lower, because I keep typing this
command WQ wq
command Wq wq
command W w
command Q q

" Quickly run shell command
nnoremap ! :call feedkeys(":! ")<CR>

"""""""""""""""""""""""
" VIM user interface
"""""""""""""""""""""""

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Avoid garbled characters in Chinese language windows OS
let $LANG='en' 
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

" Turn on the Wild menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
  set wildignore+=.git\*,.hg\*,.svn\*
else
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Show line numbers
set number

" Show the status bar
set laststatus=2

"Always show current position
set ruler

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch 

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Properly disable sound on errors on MacVim
if has("gui_macvim")
  autocmd GUIEnter * set vb t_vb=
endif

" Make the vsplit prettier
set fillchars+=vert:│
highlight VertSplit ctermbg=NONE guibg=NONE

" Skinny cursor in insert mode, fat cursor in normal mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"


""""""""""""""""""""""
" Colors and Fonts
""""""""""""""""""""""

" Enable syntax highlighting
syntax enable 

" Enable 256 colors palette in Gnome Terminal
if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif

" Enable true colors
if has("nvim")
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

if has("termguicolors")
  set termguicolors
endif

" Configure theme
set background=dark

try
  colorscheme palenight
catch
endtry

" Set extra options when running in GUI mode
if has("gui_running")
  set guioptions-=T
  set guioptions-=e
  set t_Co=256
  set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""
" Files
"""""""""""""""""""""""

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

nnoremap <leader>ff :FZF<CR>
nnoremap <leader>pf :Files<CR>
nnoremap <leader>pt :NERDTreeToggle<CR>
nnoremap <leader>p% :NERDTreeFind<CR>

""""""""""""""""""""""
" Text
""""""""""""""""""""""

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set softtabstop=2
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines


""""""""""""""""""""""""""""""
" Visual mode related
""""""""""""""""""""""""""""""

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

"""""""""""""""""""""""""""""
" Buffers
"""""""""""""""""""""""""""""

" Show buffers
nnoremap <leader>bb :Buffers<CR>

" Close the current buffer
map <leader>bd :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Flip to previous buffer
map <leader><tab> :b#<CR>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers 
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


""""""""""""""""""""""""""""
" Windows
""""""""""""""""""""""""""""

" Split normally
set splitbelow
set splitright

" Split
nnoremap <leader>w- :split<CR>
nnoremap <leader>w/ :vsplit<CR>

" Balance windows
nnoremap <leader>w= :wincmd =<CR>

" Delete window
nnoremap <leader>wd :bdelete<CR>

" Cycle
nnoremap <leader>ww :wincmd w<CR>

" Navigate
nnoremap <leader>wh :wincmd h<CR>
nnoremap <leader>wj :wincmd j<CR>
nnoremap <leader>wk :wincmd k<CR>
nnoremap <leader>wl :wincmd l<CR>

" Move
nnoremap <leader>wH :wincmd H<CR>
nnoremap <leader>wJ :wincmd J<CR>
nnoremap <leader>wK :wincmd K<CR>
nnoremap <leader>wL :wincmd L<CR>

" Jump to window with number keys <leader>1-9
let i = 1
while i <= 9
  execute 'map <leader>' . i . ' :' . i . 'wincmd w<CR>'
  let i = i + 1
endwhile


""""""""""""""""""""""""""""
" Tabs
""""""""""""""""""""""""""""

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 
map <leader>t<leader> :tabnext 

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/


""""""""""""""""""""""""
" Search
""""""""""""""""""""""""

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Use ag instead of ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" incremental search
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Project with search
nnoremap <leader>sp :Ag<space>

" Search current file
nnoremap <leader>ss :BLines<space>

" Clear highlight
nnoremap <leader>sc :noh<CR>

" Search the project for the visual selection
vnoremap <leader>sp "ky:Ag <C-R>k<CR>

" Search the current file for the visual selection
vnoremap <leader>ss "ky:Ag <C-R>k %<CR>

""""""""""""""""""""""
" Linting
""""""""""""""""""""""

let g:ale_completion_enabled = 1
let g:ale_completion_max_suggestions = 10
let g:ale_completion_delay = 400

let g:ale_sign_error = '✕'
let g:ale_sign_warning = '⚠'
let g:ale_sign_column_always = 1

let g:ale_linters = {	
    \ 'javascript': ['prettier', 'eslint'],
    \ 'ruby': ['ruby'],
    \ 'typescript': ['prettier', 'tslint', 'eslint', 'tsserver'],
    \ 'eruby': [],
    \ 'elixir': [],
    \ 'python': ['flake8'],
    \}	

let g:ale_fixers = {	
    \ 'javascript': ['prettier', 'eslint'],
    \ 'ruby': ['rubocop'],
    \ 'typescript': ['prettier', 'tslint', 'eslint'],
    \ 'elixir': ['mix_format'],
    \}	

highlight ALEErrorSign ctermfg=204 guifg=#ff5370 guibg=NONE ctermbg=NONE
highlight ALEWarningSign ctermfg=180 guifg=#ffcb6b guibg=NONE ctermbg=NONE

nnoremap <leader>af :ALEFix<CR>	
nnoremap <leader>aj :%!python -m json.tool<CR>

""""""""""""""""""""""
" Status line
""""""""""""""""""""""

let g:lightline = {}

" Set the colorscheme
let g:lightline.colorscheme = 'palenight'

" Integrate with ALE
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }

let g:lightline.component_type = {
      \  'linter_checking': 'left',
      \  'linter_warnings': 'warning',
      \  'linter_errors': 'error',
      \  'linter_ok': 'left',
      \ }

let g:lightline.active = {
      \ 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]]
      \ }

""""""""""""""""""""""
" Editing
""""""""""""""""""""""

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  silent! %s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfun

if has("autocmd")
  autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif


""""""""""""""""""""""
" Misc
""""""""""""""""""""""

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scribble
map <leader>q :e ~/buffer<cr>

" Quickly open a markdown buffer for scribble
map <leader>x :e ~/buffer.md<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>


""""""""""""""""""""""
" Helper functions
""""""""""""""""""""""

" Returns true if paste mode is enabled
function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  endif
  return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction

function! CmdLine(str)
  call feedkeys(":" . a:str)
endfunction 

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'gv'
    call CmdLine("Ack '" . l:pattern . "' " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

" Thanks to https://github.com/amix/vimrc
